// contains various utility functions
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * a window stores _size_ number of values
 * and returns averages. Useful for keeping running
 * track of validation or training accuracy during SGD
 */
var Window = (function () {
    function Window(size, minsize) {
        this.v = [];
        this.size = typeof (size) === 'undefined' ? 100 : size;
        this.minsize = typeof (minsize) === 'undefined' ? 20 : minsize;
        this.sum = 0;
    }
    Window.prototype.add = function (x) {
        this.v.push(x);
        this.sum += x;
        if (this.v.length > this.size) {
            var xold = this.v.shift();
            this.sum -= xold;
        }
    };
    Window.prototype.get_average = function () {
        if (this.v.length < this.minsize) {
            return -1;
        }
        else {
            return this.sum / this.v.length;
        }
    };
    Window.prototype.reset = function () {
        this.v = [];
        this.sum = 0;
    };
    return Window;
}());
exports.Window = Window;
/**
 * returns min, max and indeces of an array
 */
function maxmin(w) {
    if (w.length === 0) {
        return {};
    } // ... ;s
    var maxv = w[0];
    var minv = w[0];
    var maxi = 0;
    var mini = 0;
    for (var i = 1; i < w.length; i++) {
        if (w[i] > maxv) {
            maxv = w[i];
            maxi = i;
        }
        if (w[i] < minv) {
            minv = w[i];
            mini = i;
        }
    }
    return { maxi: maxi, maxv: maxv, mini: mini, minv: minv, dv: maxv - minv };
}
exports.maxmin = maxmin;
/**
 * returns string representation of float
 * but truncated to length of d digits
 */
function f2t(x, d) {
    if (typeof (d) === 'undefined') {
        d = 5;
    }
    var dd = 1.0 * Math.pow(10, d);
    return '' + Math.floor(x * dd) / dd;
}
exports.f2t = f2t;
//# sourceMappingURL=cnnutil.js.map