import { Vol } from "./convnet_vol";
import { LayerBase, LayerOptions, ILayer, LayerJSON, ParamsAndGrads } from "./layers";
export interface DotproductsLayerOptions extends LayerOptions {
    filters?: number;
    /** <optional> add dropout layer with drop probability */
    drop_prob?: number;
    /** <optional> set activation function. */
    activation?: string;
    bias_pref?: number;
    l1_decay_mul?: number;
    l2_decay_mul?: number;
}
export interface ConvLayerOptions extends DotproductsLayerOptions {
    /** <required> */
    sx: number;
    /** <optional> */
    sy?: number;
    /** <optional> */
    stride?: number;
    /** <optional> */
    pad?: number;
    /** <optional> */
    l1_decay_mul?: number;
    /** <optional> */
    l2_decay_mul?: number;
}
export interface FullyConnLayerOptions extends DotproductsLayerOptions {
    num_neurons: number;
}
export declare class DotproductsLayer extends LayerBase {
    l1_decay_mul: number;
    l2_decay_mul: number;
    filters: Vol[];
    biases: Vol;
    out_depth: number;
    out_act: Vol;
    in_act: Vol;
    constructor(opt?: DotproductsLayerOptions);
}
/**
 * ConvLayer does convolutions (so weight sharing spatially)
*/
export declare class ConvLayer extends DotproductsLayer {
    sx: number;
    sy: number;
    stride: number;
    pad: number;
    in_depth: number;
    in_sx: number;
    in_sy: number;
    constructor(opt?: LayerOptions);
    forward(V: Vol): Vol;
    backward(): number;
    getParamsAndGrads(): ParamsAndGrads[];
    toJSON(): LayerJSON;
    fromJSON(json: LayerJSON): void;
}
/**
 * FullyConn is fully connected dot products
 */
export declare class FullyConnLayer extends DotproductsLayer implements ILayer {
    num_inputs: number;
    bias_pref: number;
    constructor(opt?: LayerOptions);
    forward(V: Vol): Vol;
    backward(): void;
    getParamsAndGrads(): ParamsAndGrads[];
    toJSON(): LayerJSON;
    fromJSON(json: LayerJSON): void;
}
