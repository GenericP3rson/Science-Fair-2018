Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layers_1 = require("./layers");
var util = require("./convnet_util");
var getopt = util.getopt;
var InputLayer = (function (_super) {
    tslib_1.__extends(InputLayer, _super);
    function InputLayer(opt) {
        var _this = this;
        if (!opt) {
            return;
        }
        _this = _super.call(this, opt) || this;
        // required: depth
        _this.out_depth = getopt(opt, ['out_depth', 'depth'], 0);
        // optional: default these dimensions to 1
        _this.out_sx = getopt(opt, ['out_sx', 'sx', 'width'], 1);
        _this.out_sy = getopt(opt, ['out_sy', 'sy', 'height'], 1);
        // computed
        _this.layer_type = 'input';
        return _this;
    }
    InputLayer.prototype.forward = function (V) {
        this.in_act = V;
        this.out_act = V;
        return this.out_act; // simply identity function for now
    };
    InputLayer.prototype.backward = function () { };
    InputLayer.prototype.getParamsAndGrads = function () {
        return [];
    };
    InputLayer.prototype.toJSON = function () {
        var json = {};
        json.out_depth = this.out_depth;
        json.out_sx = this.out_sx;
        json.out_sy = this.out_sy;
        json.layer_type = this.layer_type;
        return json;
    };
    InputLayer.prototype.fromJSON = function (json) {
        this.out_depth = json.out_depth;
        this.out_sx = json.out_sx;
        this.out_sy = json.out_sy;
        this.layer_type = json.layer_type;
    };
    return InputLayer;
}(layers_1.LayerBase));
exports.InputLayer = InputLayer;
//# sourceMappingURL=convnet_layers_input.js.map