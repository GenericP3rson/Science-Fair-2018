import { Vol } from "./convnet_vol";
import { LayerOptions, ILayer, LayerJSON, ParamsAndGrads } from "./layers";
export interface NetJSON {
    layers?: LayerJSON[];
}
/**
 * Net manages a set of layers
 * For now constraints: Simple linear order of layers, first layer input last layer a cost layer
 */
export declare class Net {
    layers: ILayer[];
    constructor(options?: LayerOptions[]);
    makeLayers(defs: LayerOptions[]): void;
    forward(V: Vol, is_training?: boolean): Vol;
    getCostLoss(V: Vol, y: number | number[] | Float64Array | {
        [key: string]: number;
    }): number;
    /**
     * backprop: compute gradients wrt all parameters
     */
    backward(y: number | number[] | Float64Array | {
        [key: string]: number;
    }): number;
    getParamsAndGrads(): ParamsAndGrads[];
    getPrediction(): number;
    toJSON(): NetJSON;
    fromJSON(json: NetJSON): void;
}
