import { Vol } from "./convnet_vol";
import { Net, NetJSON } from "./convnet_net";
import { Trainer, TrainerOptions } from "./convnet_trainers";
import { LayerOptions } from "./layers";
export interface MagicNetOptions {
    [key: string]: number | string;
    train_ratio?: number;
    num_folds?: number;
    num_candidates?: number;
    num_epochs?: number;
    ensemble_size?: number;
    batch_size_min?: number;
    batch_size_max?: number;
    l2_decay_min?: number;
    l2_decay_max?: number;
    learning_rate_min?: number;
    learning_rate_max?: number;
    momentum_min?: number;
    momentum_max?: number;
    neurons_min?: number;
    neurons_max?: number;
}
export interface MagicNetJSON {
    nets?: NetJSON[];
}
export interface Fold {
    train_ix: number[];
    test_ix: number[];
}
export interface Candidate {
    acc?: number[];
    accv?: number;
    layer_defs?: LayerOptions[];
    trainer_def?: TrainerOptions;
    net?: Net;
    trainer?: Trainer;
}
export declare class MagicNet {
    data: Vol[];
    labels: number[];
    train_ratio: number;
    num_folds: number;
    num_candidates: number;
    num_epochs: number;
    ensemble_size: number;
    batch_size_min: number;
    batch_size_max: number;
    l2_decay_min: number;
    l2_decay_max: number;
    learning_rate_min: number;
    learning_rate_max: number;
    momentum_min: number;
    momentum_max: number;
    neurons_min: number;
    neurons_max: number;
    folds: Fold[];
    candidates: Candidate[];
    evaluated_candidates: Candidate[];
    unique_labels: number[];
    iter: number;
    foldix: number;
    finish_fold_callback: () => void;
    finish_batch_callback: () => void;
    constructor(data?: Vol[], labels?: number[], opt?: MagicNetOptions);
    sampleFolds(): void;
    sampleCandidate(): Candidate;
    sampleCandidates(): void;
    step(): void;
    evalValErrors(): number[];
    /**
     * returns prediction scores for given test data point, as Vol
     * uses an averaged prediction from the best ensemble_size models
     * x is a Vol.
     */
    predict_soft(data: Vol): Vol;
    predict(data: Vol): number;
    toJSON(): MagicNetJSON;
    fromJSON(json: MagicNetJSON): void;
    onFinishFold(f: {
        (): void;
    }): void;
    onFinishBatch(f: {
        (): void;
    }): void;
}
