export declare function gaussRandom(): number;
export declare function randf(a: number, b: number): number;
export declare function randi(a: number, b: number): number;
export declare function randn(mu: number, std: number): number;
export declare function zeros(n?: number): number[] | Float64Array;
export declare function arrContains<T>(arr: T[], elt: T): boolean;
export declare function arrUnique<T>(arr: T[]): T[];
import { MaxMinResult } from "./cnnutil";
/** return max and min of a given non-empty array. */
export declare function maxmin(w: number[] | Float64Array): MaxMinResult;
/** create random permutation of numbers, in range [0...n-1] */
export declare function randperm(n: number): number[];
/** sample from list lst according to probabilities in list probs
 * the two lists are of same size, and probs adds up to 1
 */
export declare function weightedSample(lst: number[], probs: number[]): number;
/**
 * syntactic sugar function for getting default parameter values
 */
export declare function getopt(opt: {
    [key: string]: number | string;
}, field_name: string | string[], default_value: number): number;
export declare function assert(condition: boolean, message: string): void;
