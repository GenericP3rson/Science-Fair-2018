import { Vol } from "./convnet_vol";
import { LayerBase, LayerOptions, ILayer, LayerJSON, ParamsAndGrads } from "./layers";
export interface ReluLayerOptions extends LayerOptions {
}
export interface SigmoidLayerOptions extends LayerOptions {
}
export interface MaxLayerOptions extends LayerOptions {
    /** <required> group_size must be the integral multiple of the input size   */
    group_size: number;
}
export interface TanhLayerOptions extends LayerOptions {
}
export declare class OutputLayer extends LayerBase {
    in_act: Vol;
    out_act: Vol;
    constructor(opt: LayerOptions);
}
/**
 * Implements ReLU nonlinearity elementwise
 * x -> max(0, x)
 * the output is in [0, inf)
 */
export declare class ReluLayer extends OutputLayer implements ILayer {
    constructor(opt?: LayerOptions);
    forward(V: Vol): Vol;
    backward(): void;
    getParamsAndGrads(): ParamsAndGrads[];
    toJSON(): LayerJSON;
    fromJSON(json: LayerJSON): void;
}
/**
 * Implements Sigmoid nnonlinearity elementwise
 * x -> 1/(1+e^(-x))
 * so the output is between 0 and 1.
 */
export declare class SigmoidLayer extends OutputLayer implements ILayer {
    constructor(opt?: LayerOptions);
    forward(V: Vol): Vol;
    backward(): void;
    getParamsAndGrads(): ParamsAndGrads[];
    toJSON(): LayerJSON;
    fromJSON(json: LayerJSON): void;
}
export declare class MaxoutLayer extends OutputLayer implements ILayer {
    group_size: number;
    switches: number[] | Float64Array;
    constructor(opt?: LayerOptions);
    forward(V: Vol): Vol;
    backward(): void;
    getParamsAndGrads(): ParamsAndGrads[];
    toJSON(): LayerJSON;
    fromJSON(json: LayerJSON): void;
}
export declare class TanhLayer extends OutputLayer implements ILayer {
    constructor(opt?: LayerOptions);
    forward(V: Vol): Vol;
    backward(): void;
    getParamsAndGrads(): ParamsAndGrads[];
    toJSON(): LayerJSON;
    fromJSON(json: LayerJSON): void;
}
